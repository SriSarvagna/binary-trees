#include <iostream>
#include <cstdlib>
using namespace std;

struct Node 
{
    int data;
    Node *left, *right;
};

Node* createNode(int data) 
{
    Node* temp = new Node();
    temp->data = data;
    temp->left = nullptr;
    temp->right = nullptr;
    return temp;
}

Node* insert(Node* root, int data) 
{
    if (root == nullptr)
    {
        return createNode(data);
    }

    if (data < root->data) 
    {
        root->left = insert(root->left, data);
    } 
    else 
    {
        root->right = insert(root->right, data);
    }

    return root;
}

Node* findMin(Node* root) 
{
    while (root->left != nullptr) 
    {
        root = root->left;
    }
    return root;
}

Node* deleteNode(Node* root, int data) 
{
    if (root == nullptr) 
    {
        return root;
    }

    if (data < root->data) 
    {
        root->left = deleteNode(root->left, data);
    } 
    else if (data > root->data) 
    {
        root->right = deleteNode(root->right, data);
    } 
    else 
    {
        if (root->left == nullptr) 
        {
            Node* temp = root->right;
            delete root;
            return temp;
        } 
        else if (root->right == nullptr) 
        {
            Node* temp = root->left;
            delete root;
            return temp;
        }

        Node* temp = findMin(root->right);

        root->data = temp->data;

        root->right = deleteNode(root->right, temp->data);
    }

    return root;
}

void printTree(Node* root) 
{
    if (root == nullptr) 
    {
        return;
    }
    printTree(root->left);
    cout << root->data << " ";
    printTree(root->right);
}

int main() 
{
    Node* root = nullptr;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);
    cout << "Inorder traversal of the original binary tree: ";
                printTree(root);
                cout << endl;

    int choice, value;

    do 
    {
        cout << "\nBinary Tree Operations:" << endl;
        cout << "1. Insert an element" << endl;
        cout << "2. Delete an element" << endl;
        cout << "3. Print Inorder Traversal" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) 
        {
            case 1:
                cout << "Enter the value to insert: ";
                cin >> value;
                root = insert(root, value);
                cout << "Inorder traversal of the binary tree after adding an element: ";
                printTree(root);
                cout << endl;
                break;

            case 2:
                cout << "Enter the value to delete: ";
                cin >> value;
                root = deleteNode(root, value);
                cout << "Inorder traversal of the binary tree after deleting an element: ";
                printTree(root);
                cout << endl;
                break;

            case 3:
                cout << "Inorder traversal of the binary tree: ";
                printTree(root);
                cout << endl;
                break;

            case 4:
                cout << "Exiting program." << endl;
                break;

            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } 
    while (choice != 4);

    return 0;
}
