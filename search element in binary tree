#include <iostream>
#include <cstdlib>
using namespace std;

struct Node 
{
    int data;
    Node *left, *right;
};

Node* createNode(int data) 
{
    Node* temp = new Node();
    temp->data = data;
    temp->left = nullptr;
    temp->right = nullptr;
    return temp;
}

Node* insert(Node* root, int data) 
{
    if (root == nullptr)
    {
        return createNode(data);
    }

    if (data < root->data) 
    {
        root->left = insert(root->left, data);
    } 
    else 
    {
        root->right = insert(root->right, data);
    }

    return root;
}


void printTree(Node* root) 
{
    if (root == nullptr) 
    {
        return;
    }
    printTree(root->left);
    cout << root->data << " ";
    printTree(root->right);
}

int search(Node* root, int key, int index = 1) {
    if (root == nullptr) {
        return -1; // Key not found
    }

    if (root->data == key) {
        return index;
    }

    int leftResult = search(root->left, key, 2 * index);
    if (leftResult != -1) return leftResult; 

    return search(root->right, key, 2 * index + 1); 
}

int main() 
{
    Node* root = nullptr;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);
    cout << "Inorder traversal of the original binary tree: ";
    printTree(root);
    cout << endl;
    int value;
    cout << "Enter the element to search: ";
    cin >> value;
    int result;
    result = search(root, value);
    if (result != -1) 
    {
    cout << "Element " << value << " is present in the binary tree at index " << result << "." << endl;
    } 
    else 
    {
    cout << "Element " << value << " is not present in the binary tree." << endl;
    }
}
